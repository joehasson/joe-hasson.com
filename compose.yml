services:
  reverse-proxy:
    image: reverse-proxy:latest
    ports:
      - "${APP_PORT:-80}:80"
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:80/health_check"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 2s
    depends_on:
      backend:
        condition: service_healthy

  backend:
    image: backend:latest
    ports:
      - "8001:8001"
    environment:
      - APP_BASE_URL=${APP_BASE_URL}
      - APP_HMAC_SECRET=${APP_HMAC_SECRET}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - BLOG_EMAIL_ADDRESS=${BLOG_EMAIL_ADDRESS}
      - BLOG_EMAIL_PASSWORD=${BLOG_EMAIL_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8001/health_check"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 2s
    restart: always
    depends_on:
      blog-post-dispatcher:
        condition: service_completed_successfully

  blog-post-dispatcher:
    image: blog-post-dispatcher:latest
    environment:
      - APP_BASE_URL=${APP_BASE_URL}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - BLOG_EMAIL_ADDRESS=${BLOG_EMAIL_ADDRESS}
      - BLOG_EMAIL_PASSWORD=${BLOG_EMAIL_PASSWORD}
    depends_on:
      migrations:
        condition: service_completed_successfully

  migrations:
    image: migrations:latest
    environment:
      - DATABASE_URL=${CONTAINERISED_DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: >         
        /bin/sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME} &&
        psql -U ${DB_USER} -d ${DB_NAME} -c "SELECT 1"'
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      # over-ridden in compose.prod.yml to use EBS mount
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
    name: ec2-user_postgres_data
