# .github/workflows/deploy.yml
name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.8"

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        
      - name: Terraform Plan
        working-directory: ./terraform
        run: >
          terraform plan
          -var="ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}"
          -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}"
          -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"

      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main'
        run: >
          terraform apply -auto-approve
          -var="ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}"
          -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}"
          -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"
        
      # Store IP for use in later step
      - name: Get EC2 IP
        working-directory: ./terraform
        run: |
          echo "EC2_IP=$(terraform output -json | jq -r '.public_ip.value')" >> $GITHUB_ENV

      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "files": [
                "https://joe-hasson.com/*"
              ]
            }'

      - name: Remove existing nginx.conf from server
        uses: appleboy/ssh-action@v1.0.0
        with:
          username: ec2-user
          host: ${{ env.EC2_IP }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script:
          sudo rm /etc/nginx/nginx.conf

      - name: Push new nginx.conf to server
        uses: appleboy/scp-action@v0.1.7
        with:
          username: ec2-user
          host: ${{ env.EC2_IP }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "nginx.conf"
          target: "/etc/nginx/"
          sudo: true

      - name: Set permissions for nginx.conf on server
        uses: appleboy/ssh-action@1.0.0
        with:
          host: ${{ env.EC2_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo chown root:root /etc/nginx/nginx.conf
            sudo chmod 644 /etc/nginx/nginx.conf

      - name: Render static content
        run: |
          pip install webassets jinja2
          python3 scripts/render.py

      - name: Push static content to EC2 server
        uses: appleboy/scp-action@v0.1.7
        with:
          username: ec2-user
          host: ${{ env.EC2_IP }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "static/*"
          target: "/static"
          sudo: true

      - name: Install nginx on server and run
        uses: appleboy/ssh-action@v1.0.0
        env:
          REPO: ${{ github.repository }}
        with:
          username: ec2-user
          host: ${{ env.EC2_IP }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: REPO
          script: |
            set -e

            # install nginx
            sudo yum update -y
            sudo amazon-linux-extras install nginx1 -y
            
            # Check nginx configuration and then start
            sudo nginx -t
            sudo systemctl restart nginx
            sudo systemctl enable nginx
