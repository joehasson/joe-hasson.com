# .github/workflows/deploy.yml
name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-typecheck-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check format
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: SQLX_OFFLINE=true cargo clippy --all-targets --all-features -- -D warnings
      
      - name: cargo check
        run: SQLX_OFFLINE=true cargo check

      - name: cargo test
        run: cargo test

  infrastructure:
    runs-on: ubuntu-latest
    outputs:
      ec2_ip: ${{ steps.ec2_ip.outputs.EC2_IP }}
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.8"

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        
      - name: Terraform Plan
        working-directory: ./terraform
        run: >
          terraform plan
          -var="ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}"
          -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}"
          -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"

      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main'
        run: >
          terraform apply -auto-approve
          -var="ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}"
          -var="cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}"
          -var="cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"
        
      # Store IP for use in later jobs
      - name: Get EC2 IP
        id: ec2_ip
        working-directory: ./terraform
        run: |
          echo "EC2_IP=$(terraform output -json | jq -r '.public_ip.value')" >> $GITHUB_OUTPUT

  build-app-container-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build app docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: joe-hasson-personal-site
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Archive and compress images ahead of SCP
        run: >
          docker save joe-hasson-personal-site | gzip > app-image.tar.gz

      - name: Upload app image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: app-image.tar.gz

  build-migration-container-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Build migration docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.migrations
          tags: joe-hasson-personal-site-migrations
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Archive and compress images ahead of SCP
        run: >
          docker save joe-hasson-personal-site-migrations | gzip > migrations-image.tar.gz

      - name: Upload migrations image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: migrations-image.tar.gz


  prepare-server:
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install docker and docker compose on server
        uses: appleboy/ssh-action@v1.0.0
        env:
          REPO: ${{ github.repository }}
        with:
          username: ec2-user
          host: ${{ needs.infrastructure.outputs.ec2_ip }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            # Set up docker
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            # Stop and remove all existing containers - there might be
            # an image running already
            if [ -n "$(docker ps -q)" ]; then
              docker stop $(docker ps -q) && docker rm $(docker ps -aq)
            fi
            # Docker compose
            DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
            mkdir -p $DOCKER_CONFIG/cli-plugins
            curl -SL https://github.com/docker/compose/releases/download/v2.32.4/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
            chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose


      - name: SCP compose.yml onto server
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ needs.infrastructure.outputs.ec2_ip }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "compose.yml"
          target: /home/ec2-user

  release:
    needs: [lint-and-typecheck-and-test, infrastructure, prepare-server, build-app-container-image, build-migration-container-image]
    runs-on: ubuntu-latest
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: SCP app docker image to server
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ needs.infrastructure.outputs.ec2_ip }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "app-image.tar.gz"
          target: /tmp

      - name: SCP migrations docker image to server
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ needs.infrastructure.outputs.ec2_ip }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          source: "migrations-image.tar.gz"
          target: /tmp

      - name: run application on server using docker compose
        uses: appleboy/ssh-action@v1.0.0
        env:
          REPO: ${{ github.repository }}
          DB_NAME: ${{ vars.DB_NAME }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DATABASE_URL: postgres://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}:${{ vars.DB_PORT}}/${{ vars.DB_NAME}}
          APP_ENV: ${{ vars.APP_ENV }}
          APP_BASE_URL: ${{ vars.APP_BASE_URL }}
          APP_HMAC_SECRET: ${{ secrets.APP_HMAC_SECRET }}
          BLOG_EMAIL_ADDRESS: ${{ vars.BLOG_EMAIL_ADDRESS }}
          BLOG_EMAIL_PASSWORD: ${{ secrets.BLOG_EMAIL_PASSWORD }}
        with:
          username: ec2-user
          host: ${{ needs.infrastructure.outputs.ec2_ip }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: > 
            DB_NAME,
            DB_PORT,
            DB_USER,
            DB_HOST,
            DB_PASSWORD,
            DATABASE_URL,
            APP_ENV,
            APP_BASE_URL,
            APP_HMAC_SECRET,
            BLOG_EMAIL_ADDRESS,
            BLOG_EMAIL_PASSWORD
          script: |
            # Export environment variables
            export DB_NAME=${DB_NAME}
            export DB_PORT=${DB_PORT}
            export DB_USER=${DB_USER}
            export DB_HOST=${DB_HOST}
            export DB_PASSWORD=${DB_PASSWORD}
            export CONTAINERISED_DATABASE_URL=${DATABASE_URL}
            export APP_ENV=${APP_ENV}
            export APP_BASE_URL=${APP_BASE_URL}
            export APP_HMAC_SECRET=${APP_HMAC_SECRET}
            export BLOG_EMAIL_ADDRESS=${BLOG_EMAIL_ADDRESS}
            export BLOG_EMAIL_PASSWORD=${BLOG_EMAIL_PASSWORD}

            echo "What docker compose sees:"
            docker compose config

            # load images and run containers
            docker load -i /tmp/app-image.tar.gz
            docker load -i /tmp/migrations-image.tar.gz
            docker compose up -d --wait web db
            docker compose up migrations
            
      - name: Purge Cloudflare Cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything": true}'

