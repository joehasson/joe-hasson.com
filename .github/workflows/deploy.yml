# .github/workflows/deploy.yml
name: Test and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.0.0"

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
        
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan -var="
          ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}
          cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}
          "

      - name: Terraform Apply
        working-directory: ./terraform
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var="ssh_public_key=${{ secrets.EC2_SSH_PUBLIC_KEY }}"
        
      # Store IP for use in later step
      - name: Get EC2 IP
        id: get-ip
        working-directory: ./terraform
        run: |
          echo "EC2_IP=$(terraform output -json | jq -r '.public_ip.value')" >> $GITHUB_OUTPUT

      - name: Wait for instance to be ready
        run: |
          sleep 60  # Give the instance time to complete user_data script

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          REPO: ${{ github.repository }}
          EC2_IP: ${{ steps.get-ip.outputs.EC2_IP }}
        run: chmod +x ./scripts/deploy.sh && ./scripts/deploy.sh
